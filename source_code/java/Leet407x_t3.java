package AlgorithmTraining.exercise.leetcodeXiaoXiang2;

import java.util.*;

/**
 * Created by G5501 on 2017/10/17.
 */
class Cell implements Comparable<Cell> {
    int height;
    int x;
    int y;
    Cell(int height, int x, int y) {
        this.height = height;
        this.x = x;
        this.y = y;
    }

    public int compareTo(Cell c) {
        return height - c.height;
    }

    public String toString() {
        return "x=" + x + " y=" + y + " h=" + height + ",";
    }
}

class Leet407x3 {
    public int trapRainWater(int[][] heightMap) {
        final int YL = heightMap.length;
        if (YL == 0)
            return 0;
        final int XL = heightMap[0].length;
        if (XL == 0)
            return 0;
        int[][] mark = new int[YL][XL];
        PriorityQueue<Cell> pq = new PriorityQueue<>();
        // add all boarder point to priority queue
        for (int x = 0; x < XL; x++) {
            pq.offer(new Cell(heightMap[0][x], x, 0));
            mark[0][x] = 1;
            pq.offer(new Cell(heightMap[YL - 1][x], x, YL - 1));
            mark[YL - 1][x] = 1;
        }

        for (int y = 0; y< YL; y++) {
            pq.offer(new Cell(heightMap[y][0], 0, y));
            mark[y][0] = 1;
            pq.offer(new Cell(heightMap[y][XL - 1], XL - 1, y));
            mark[y][XL - 1] = 1;
        }

        int volume = 0;
        int seaLevel = 0;
        while (pq.size() > 0) {
            //System.out.println();
            Cell curCell = pq.poll();
            //System.out.println(curCell);
            seaLevel = Math.max(curCell.height, seaLevel);
            List<int[]> adjs = getAdj(XL, YL, curCell.x, curCell.y);
            for (int[] adjPoint : adjs) {
                int adjx = adjPoint[0];
                int adjy = adjPoint[1];
                if (mark[adjy][adjx] == 0) { // just add unmarked
                    pq.offer(new Cell(heightMap[adjy][adjx], adjx, adjy));
                    mark[adjy][adjx]= 1;
                    if (heightMap[adjy][adjx] <= seaLevel)
                        volume += (seaLevel - heightMap[adjy][adjx]);
                }
            }
        }
        return volume;
    }

    private List<int[]> getAdj(int xL, int yL, int x, int y) {
        List<Integer> xs = new ArrayList<>();
        List<Integer> ys = new ArrayList<>();

        if (x > 0)
            xs.add(x - 1);
        if (y > 0)
            ys.add(y - 1);
        if (x < xL - 1)
            xs.add(x + 1);
        if (y < yL - 1)
            ys.add(y + 1);
        List<int[]> adjs = new ArrayList<>();
        for (int x0 : xs) {
            int[] xx = new int[2];
            xx[0] = x0;
            xx[1] = y;
            adjs.add(xx);
        }

        for (int y0 : ys) {
            int[] yy = new int[2];
            yy[0] = x;
            yy[1] = y0;
            adjs.add(yy);
        }
        return adjs;
    }
}

public class Leet407x_t3 {
    public static void main(String[] args) {
        Leet407x3 leet = new Leet407x3();
        int[][] heightmap = new int[][] {
                {1,4,3,1,3,2},
                {3,2,1,3,2,4},
                {2,3,3,2,3,1}
        };
        heightmap = new int[][] {
                {1,3,3,1,3,2},
                {3,2,1,3,2,3},
                {3,3,3,2,3,1}
        };
        heightmap = new int[][] {{1106,1106,1106,1108,1104,1107,1101,1101,1103,1105,1103,1100,1105,1105,1104,1102,1102,1106,1102,1104,1106,1108,1104,1100,1100,1107,1100,1106,1101,1108,1100,1109,1106,1106,1108,1100,1104,1101,1104,1107,1108,1109,1100,1103,1106,1106,1105,1109,1102,1100},{1103,321,248,190,181,248,499,794,807,610,914,737,1001,270,14,541,401,720,684,867,799,22,526,279,865,695,325,803,554,560,523,209,871,113,741,42,352,230,178,501,182,82,228,526,343,584,57,86,646,732},{1103,436,744,811,705,952,496,373,97,392,923,610,944,784,65,27,168,759,248,337,250,772,761,469,288,94,395,688,170,32,410,455,458,496,257,505,790,95,868,877,830,133,829,116,907,885,133,418,634,723},{1107,875,486,848,686,116,933,423,794,445,445,546,891,245,385,490,741,165,927,951,33,747,75,204,205,972,79,329,732,56,42,819,273,870,658,949,977,933,362,113,368,150,650,249,385,377,729,116,532,647},{1108,907,736,475,454,932,437,523,603,512,921,635,321,184,848,321,123,167,244,828,622,603,320,614,194,695,981,266,154,856,903,554,753,981,19,549,255,798,63,848,300,974,826,964,501,664,275,614,173,510},{1104,785,455,94,390,639,132,361,895,276,207,140,172,303,464,181,842,709,321,247,548,612,564,716,918,55,722,183,11,885,35,138,12,480,574,392,110,696,96,347,314,645,478,476,290,932,999,475,983,311},{1104,873,265,618,579,173,15,291,698,369,518,724,849,873,194,413,255,646,100,693,984,756,681,804,223,961,78,564,778,403,865,833,267,472,793,188,987,151,822,676,510,330,390,349,193,926,104,791,915,194},{1106,889,941,497,35,506,801,455,60,569,848,268,392,105,82,176,284,60,317,96,78,169,768,810,860,304,726,954,437,983,491,253,862,774,741,239,622,532,684,672,91,523,282,826,618,355,344,244,757,1003},{1102,825,162,441,625,364,87,693,308,514,667,141,757,871,905,840,101,869,714,127,532,148,640,156,964,601,853,650,187,600,643,860,415,147,643,382,501,720,418,151,576,427,635,675,640,882,506,83,742,210},{1101,616,700,183,762,1006,774,606,646,304,196,279,154,954,416,139,678,259,849,438,753,415,855,378,80,838,602,928,911,334,481,102,940,171,628,693,168,744,641,804,38,827,426,182,123,184,663,144,786,502},{1102,881,259,770,601,682,598,193,952,499,518,423,944,448,937,914,483,447,648,114,593,677,284,361,201,749,536,855,883,664,699,446,535,301,206,126,973,146,309,267,987,817,33,921,608,960,825,81,749,816},{1108,332,483,164,36,26,903,562,871,777,216,913,213,741,204,761,857,519,249,508,776,226,316,799,490,266,101,657,689,192,463,217,867,288,371,893,305,265,797,518,384,1003,421,939,86,615,690,285,476,281},{1103,243,497,441,384,329,697,828,977,377,362,782,584,219,61,298,102,708,905,889,216,279,234,628,208,662,585,240,937,52,511,711,637,350,494,363,670,182,533,989,549,886,761,475,95,164,115,540,862,10},{1101,69,279,348,39,477,1000,966,59,928,360,560,981,987,901,465,693,913,989,216,892,880,92,643,698,530,798,803,412,1002,156,173,61,777,511,442,245,854,399,646,772,749,197,95,79,440,902,762,343,882},{1100,225,104,755,210,792,627,350,938,29,343,84,544,746,851,398,179,438,242,920,75,356,11,614,441,80,44,685,184,729,557,495,944,1004,592,496,786,209,837,714,228,522,140,114,610,982,502,779,762,86},{1101,827,432,43,431,215,465,817,891,640,536,790,477,822,784,59,309,561,610,488,617,828,352,748,284,952,72,777,74,824,853,105,994,276,490,767,833,946,575,714,928,453,495,395,266,621,796,917,524,396},{1107,132,566,89,222,840,31,284,959,447,450,803,895,434,421,375,192,596,663,109,301,581,552,138,318,808,749,456,67,264,194,804,738,102,883,950,933,257,576,234,46,16,27,931,441,790,649,975,377,302},{1104,20,226,616,500,886,767,239,685,176,845,869,971,925,962,196,865,237,795,783,461,832,790,831,753,573,963,744,538,682,389,602,44,605,560,534,833,669,116,508,836,951,720,797,867,24,335,74,251,121},{1108,54,943,628,875,38,543,181,773,71,853,504,15,888,99,917,412,274,577,870,125,755,812,187,894,21,201,219,85,794,682,275,838,615,245,56,996,778,227,111,839,422,605,196,652,46,104,407,662,23},{1107,777,768,69,954,652,432,145,213,508,281,886,125,110,843,361,156,829,129,725,282,311,489,877,497,132,265,943,529,918,956,786,685,714,198,982,708,620,469,264,470,741,140,586,841,973,937,339,145,408},{1106,417,709,885,637,197,1007,892,130,878,800,77,1007,828,133,195,800,184,157,259,438,970,342,920,898,525,235,825,206,370,575,602,130,275,830,757,462,827,991,934,48,134,353,45,952,829,230,94,1003,729},{1105,783,689,28,693,577,543,918,744,740,631,310,332,751,575,504,850,379,674,183,303,712,307,999,747,601,818,319,685,811,390,371,936,70,389,619,989,274,879,724,1004,500,376,679,593,293,173,785,662,837},{1109,307,891,608,296,628,200,104,289,875,257,670,588,183,730,967,792,61,232,14,775,578,504,493,247,440,776,763,215,780,942,516,78,824,115,716,794,305,811,74,522,410,734,101,584,806,410,718,857,984},{1102,975,553,569,458,142,351,577,247,908,347,180,415,767,994,520,474,778,167,627,194,679,27,918,122,953,66,523,662,266,497,726,231,40,637,31,525,330,598,762,229,288,932,634,45,268,496,509,37,653},{1106,221,674,496,482,787,439,538,300,443,146,787,512,367,170,491,741,685,812,681,437,31,959,360,1007,995,970,493,846,997,136,315,561,800,801,385,929,230,265,219,16,402,349,518,111,509,999,842,184,801},{1106,963,174,815,665,171,152,626,654,341,965,132,646,516,275,437,243,194,1009,499,756,367,891,95,875,992,594,217,177,120,1008,33,425,525,190,81,686,685,49,683,16,1004,805,652,863,422,431,96,959,782},{1107,705,140,818,790,357,153,726,564,320,188,915,695,603,430,875,26,458,902,417,131,908,764,279,902,617,691,675,55,640,448,983,335,930,791,467,629,286,183,184,948,713,441,633,659,213,851,27,661,743},{1105,783,642,189,52,886,148,733,552,193,716,342,518,41,614,652,851,233,928,24,759,867,80,542,490,729,745,683,98,397,417,875,170,401,54,564,277,544,287,171,728,345,855,236,377,459,230,218,35,149},{1104,784,1006,1006,669,838,77,404,864,166,791,271,31,303,14,428,857,633,962,487,795,32,822,640,611,189,442,831,749,467,970,676,593,318,672,252,499,740,647,353,896,780,966,269,74,322,687,921,945,640},{1108,82,14,211,65,615,742,497,437,834,954,749,500,889,58,162,484,899,892,121,594,130,243,550,390,307,862,419,571,149,401,959,222,406,512,277,11,245,764,790,421,60,530,911,291,930,63,765,819,298},{1108,403,770,462,295,502,759,499,264,672,638,655,622,850,51,476,117,405,63,223,185,474,625,57,375,907,329,781,662,138,421,881,883,181,333,520,26,434,1009,280,97,990,925,61,830,319,527,290,66,933},{1105,593,397,471,641,763,368,960,886,20,441,297,243,666,820,918,529,836,343,880,458,782,860,726,833,33,35,702,665,91,625,510,674,365,323,657,470,33,960,346,396,743,985,629,399,795,538,918,974,223},{1101,774,995,991,490,170,14,515,214,21,948,830,522,965,537,187,612,997,211,562,333,597,295,308,216,37,445,96,297,761,309,428,526,646,762,1006,806,118,864,11,130,802,183,994,109,710,171,712,49,372},{1106,372,959,254,22,518,633,457,604,272,209,904,43,77,540,795,73,689,903,279,42,23,424,567,1007,523,619,521,577,658,883,184,20,185,780,384,693,755,831,639,17,382,885,50,449,416,187,865,447,81},{1104,479,446,548,388,796,414,997,307,981,645,532,507,1007,707,277,381,742,374,554,372,734,279,599,774,718,1005,952,925,794,375,402,615,811,292,993,597,696,980,246,668,967,769,165,964,818,785,687,903,149},{1102,265,225,501,206,990,561,202,284,829,338,649,221,944,802,855,927,390,542,250,978,200,207,737,707,514,546,482,543,439,974,117,46,189,608,242,521,512,786,147,683,115,786,246,401,931,91,318,663,623},{1108,631,165,756,359,215,612,247,39,145,28,1003,253,416,535,203,1000,398,57,777,536,730,234,664,966,625,937,400,285,590,365,834,212,521,932,561,726,886,150,755,21,168,101,616,926,978,810,916,718,209},{1105,596,930,259,603,238,226,530,980,854,111,336,678,313,199,952,216,267,180,708,364,191,218,455,150,134,775,950,40,836,149,66,422,421,667,15,1002,236,888,972,80,989,650,100,644,839,42,850,96,212},{1108,451,745,108,248,885,232,366,177,262,192,669,670,956,80,680,962,424,906,840,739,976,171,379,66,805,209,450,997,647,1004,887,88,739,985,679,967,207,35,134,811,217,793,472,515,216,142,819,982,390},{1101,711,356,162,81,764,957,632,204,944,269,198,821,348,279,148,369,236,345,394,713,147,953,496,961,458,54,445,268,27,825,259,728,171,764,151,925,63,773,471,998,33,659,161,723,928,300,82,507,987},{1108,210,124,761,48,427,561,93,862,171,462,677,421,180,190,527,674,457,580,437,918,920,812,919,72,877,190,714,949,687,43,109,239,510,860,277,927,764,712,132,925,164,151,688,687,332,205,351,131,776},{1100,392,686,933,653,100,800,833,156,92,862,190,191,91,690,394,711,607,148,413,81,63,920,223,742,597,897,937,938,370,703,58,752,732,333,396,822,124,571,969,558,424,149,739,857,181,123,558,130,261},{1104,202,667,224,415,399,811,302,678,91,662,724,491,757,446,815,495,610,281,56,569,829,470,60,558,670,231,24,218,352,627,522,896,284,88,301,25,889,945,46,322,949,760,804,48,548,609,533,148,232},{1100,60,51,392,462,951,52,36,317,261,730,935,125,616,209,204,907,577,435,194,613,748,485,363,542,524,253,493,47,743,715,617,145,108,1000,598,401,42,624,709,645,696,634,113,302,185,307,551,752,84},{1105,707,822,210,412,354,724,655,189,114,741,246,721,876,344,63,464,736,448,430,787,435,116,411,538,760,938,187,301,33,262,378,730,74,579,133,771,645,130,950,101,861,187,165,728,873,218,534,951,1008},{1107,728,434,765,481,962,516,410,140,159,433,392,528,505,808,449,980,569,436,101,862,528,304,391,683,374,254,243,899,196,242,548,266,18,303,738,322,161,490,452,311,265,186,829,760,337,620,731,896,46},{1104,748,564,820,129,589,185,726,175,426,264,407,964,520,767,609,600,79,761,80,874,62,335,402,233,438,729,843,511,616,231,27,706,138,837,178,717,364,894,882,780,500,631,86,10,388,38,601,810,789},{1103,674,193,701,418,768,129,138,953,630,96,174,999,792,302,826,312,10,181,548,234,303,38,208,732,39,586,760,982,738,891,347,754,74,38,163,184,509,291,127,481,377,291,470,511,584,287,166,936,810},{1104,512,455,733,710,529,762,639,279,86,367,512,423,112,576,804,265,102,303,898,219,775,617,501,587,470,427,864,626,353,16,321,855,814,44,908,333,148,537,603,576,894,457,341,348,24,135,955,468,781},{1103,678,898,802,169,475,263,586,682,231,281,40,542,478,844,928,376,168,418,903,113,984,140,560,316,478,926,793,424,385,564,609,53,452,402,564,270,1007,492,942,228,115,972,113,583,807,31,302,317,440}};
        //heightmap = new int[][] {{2,3,4},{5,6,7},{8,9,10},{11,12,13},{14,15,16}};
        System.out.println(leet.trapRainWater(heightmap));
    }
}
